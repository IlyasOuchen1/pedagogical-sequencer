import streamlit as st
import json
import pandas as pd
from datetime import datetime
from pedagogical_sequencer import PedagogicalSequencer
from utils import load_json_file, create_sample_json, export_to_csv

# Configuration de la page
st.set_page_config(
    page_title="G√©n√©rateur de S√©quenceur P√©dagogique",
    page_icon="üéì",
    layout="wide"
)

def main():
    st.title("üéì G√©n√©rateur de S√©quenceur P√©dagogique")
    st.markdown("---")
    
    # Sidebar pour la configuration
    with st.sidebar:
        st.header("‚öôÔ∏è Configuration")
        
        # Cl√© API OpenAI
        api_key = st.text_input(
            "Cl√© API OpenAI",
            type="password",
            help="Votre cl√© API OpenAI pour utiliser GPT-4"
        )
        
        st.markdown("---")
        
        # T√©l√©chargement du mod√®le JSON
        st.subheader("üìÑ Mod√®le JSON")
        sample_json = create_sample_json()
        
        st.download_button(
            label="üì• T√©l√©charger mod√®le JSON",
            data=json.dumps(sample_json, indent=2, ensure_ascii=False),
            file_name="modele_sequenceur.json",
            mime="application/json",
            help="T√©l√©chargez ce mod√®le et adaptez-le √† vos besoins"
        )
    
    # Interface principale
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.header("üì§ Donn√©es d'Entr√©e")
        
        # Upload du fichier JSON
        uploaded_file = st.file_uploader(
            "Choisissez votre fichier JSON",
            type=['json'],
            help="Uploadez votre fichier JSON contenant les objectifs p√©dagogiques"
        )
        
        # Affichage des donn√©es si fichier upload√©
        if uploaded_file is not None:
            input_data = load_json_file(uploaded_file)
            
            if input_data:
                st.success("‚úÖ Fichier JSON charg√© avec succ√®s")
                
                # Aper√ßu des donn√©es
                with st.expander("üîç Aper√ßu des donn√©es"):
                    st.json(input_data)
                
                # Validation des champs requis
                required_fields = ['domaine', 'classification_bloom', 'objectifs_smart', 'evaluation_difficulte']
                missing_fields = [field for field in required_fields if field not in input_data]
                
                if missing_fields:
                    st.warning(f"‚ö†Ô∏è Champs manquants : {', '.join(missing_fields)}")
                else:
                    st.success("‚úÖ Tous les champs requis sont pr√©sents")
    
    with col2:
        st.header("üìã S√©quenceur G√©n√©r√©")
        
        # G√©n√©ration du s√©quenceur
        if st.button("üöÄ G√©n√©rer le S√©quenceur", type="primary", disabled=not api_key):
            if uploaded_file is not None and input_data:
                with st.spinner("üîÑ G√©n√©ration en cours..."):
                    sequencer = PedagogicalSequencer(api_key)
                    sequencer_data = sequencer.generate_sequencer(input_data)
                    
                    if sequencer_data:
                        st.session_state.sequencer_data = sequencer_data
                        st.success("‚úÖ S√©quenceur g√©n√©r√© avec succ√®s !")
                    else:
                        st.error("‚ùå Erreur lors de la g√©n√©ration")
            else:
                st.error("‚ùå Veuillez d'abord uploader un fichier JSON valide")
        
        if not api_key:
            st.info("‚ÑπÔ∏è Veuillez saisir votre cl√© API OpenAI dans la sidebar")
    
    # Affichage du s√©quenceur g√©n√©r√©
    if 'sequencer_data' in st.session_state:
        st.markdown("---")
        st.header("üìä R√©sultats")
        
        sequencer_data = st.session_state.sequencer_data
        
        # Conversion en DataFrame pour l'affichage
        df = pd.DataFrame(sequencer_data)
        
        # Renommage des colonnes pour l'affichage
        column_mapping = {
            'sequence': 'S√©quence',
            'num_ecran': 'Num √âcran',
            'titre_ecran': 'Titre √âcran',
            'sous_titre': 'Sous-Titre',
            'resume_contenu': 'R√©sum√© du Contenu',
            'type_activite': 'Type d\'Activit√©',
            'commentaire': 'Commentaire'
        }
        
        df_display = df.rename(columns=column_mapping)
        
        # Affichage du tableau
        st.dataframe(
            df_display,
            use_container_width=True,
            height=400
        )
        
        # Statistiques
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üì± Nombre d'√©crans", len(sequencer_data))
        
        with col2:
            sequences = df['sequence'].dropna().unique()
            st.metric("üìö Nombre de s√©quences", len(sequences))
        
        with col3:
            activities = df['type_activite'].dropna().unique()
            st.metric("üéØ Types d'activit√©s", len(activities))
        
        with col4:
            st.metric("‚è±Ô∏è Temps estim√©", f"{len(sequencer_data) * 3} min")
        
        # Boutons d'export
        st.markdown("---")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # Export CSV
            csv_data = export_to_csv(sequencer_data)
            st.download_button(
                label="üì• Exporter en CSV",
                data=csv_data,
                file_name=f"sequenceur_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
        
        with col2:
            # Export JSON
            json_data = json.dumps(sequencer_data, indent=2, ensure_ascii=False)
            st.download_button(
                label="üì• Exporter en JSON",
                data=json_data,
                file_name=f"sequenceur_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
        
        with col3:
            if st.button("üîÑ G√©n√©rer une nouvelle version"):
                del st.session_state.sequencer_data
                st.experimental_rerun()

if __name__ == "__main__":
    main()