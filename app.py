import streamlit as st
import json
import pandas as pd
from datetime import datetime
from pedagogical_sequencer_v2 import PedagogicalSequencerV2
from utils_v2 import load_json_file, create_sample_json, export_to_csv, validate_new_format_data

# Configuration de la page
st.set_page_config(
    page_title="G√©n√©rateur de S√©quenceur P√©dagogique v2.0",
    page_icon="üéì",
    layout="wide"
)

def main():
    st.title("üéì G√©n√©rateur de S√©quenceur P√©dagogique v2.0")
    st.markdown("*Version sp√©cialis√©e pour le nouveau format JSON d'analyse d'objectifs*")
    st.markdown("---")
    
    # Sidebar pour la configuration
    with st.sidebar:
        st.header("‚öôÔ∏è Configuration")
        
        # Cl√© API OpenAI
        api_key = st.text_input(
            "Cl√© API OpenAI",
            type="password",
            help="Votre cl√© API OpenAI pour utiliser GPT-4o"
        )
        
        # Validation de la cl√© API
        if api_key:
            if api_key.startswith('sk-') and len(api_key) > 20:
                st.success("‚úÖ Cl√© API valide")
            else:
                st.error("‚ùå Format de cl√© API invalide")
                api_key = None
        
        st.markdown("---")
        
        # T√©l√©chargement du mod√®le JSON
        st.subheader("üìÑ Mod√®le JSON")
        sample_json = create_sample_json()
        
        st.download_button(
            label="üì• T√©l√©charger mod√®le JSON",
            data=json.dumps(sample_json, indent=2, ensure_ascii=False),
            file_name="modele_analyse_objectifs.json",
            mime="application/json",
            help="T√©l√©chargez ce mod√®le et adaptez-le √† vos donn√©es d'analyse"
        )
        
        # Informations sur le format
        with st.expander("‚ÑπÔ∏è Format JSON attendu"):
            st.markdown("""
            **Structure requise :**
            - `classification` : Classification Bloom d√©taill√©e
            - `formatted_objectives` : Objectifs SMART format√©s  
            - `difficulty_evaluation` : √âvaluation des difficult√©s
            
            **Champs optionnels :**
            - `domaine` : Domaine d'expertise
            - `contexte` : Contexte p√©dagogique
            """)
    
    # Interface principale
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.header("üì§ Analyse d'Objectifs")
        
        # Upload du fichier JSON
        uploaded_file = st.file_uploader(
            "Choisissez votre fichier d'analyse JSON",
            type=['json'],
            help="Uploadez votre fichier JSON d'analyse d'objectifs p√©dagogiques"
        )
        
        # Affichage des donn√©es si fichier upload√©
        if uploaded_file is not None:
            input_data = load_json_file(uploaded_file)
            
            if input_data:
                st.success("‚úÖ Fichier JSON charg√© avec succ√®s")
                
                # Validation du format sp√©cialis√©
                is_valid, validation_errors, stats = validate_new_format_data(input_data)
                
                if validation_errors:
                    st.error("‚ùå Erreurs de format d√©tect√©es :")
                    for error in validation_errors:
                        st.error(f"  ‚Ä¢ {error}")
                else:
                    st.success("‚úÖ Format valid√© - Donn√©es pr√™tes pour la g√©n√©ration")
                    
                    # Affichage des statistiques
                    col_stat1, col_stat2, col_stat3 = st.columns(3)
                    with col_stat1:
                        st.metric("üìä Objectifs d√©tect√©s", stats.get('objectives_count', 0))
                    with col_stat2:
                        st.metric("üéØ Niveaux Bloom", stats.get('bloom_levels', 0))
                    with col_stat3:
                        st.metric("üìà Niveaux difficult√©", stats.get('difficulty_levels', 0))
                
                # Aper√ßu des donn√©es
                with st.expander("üîç Aper√ßu des donn√©es"):
                    st.json(input_data)
            else:
                input_data = None
                is_valid = False
    
    with col2:
        st.header("üìã S√©quenceur G√©n√©r√©")
        
        # G√©n√©ration du s√©quenceur
        if st.button("üöÄ G√©n√©rer le S√©quenceur", type="primary", disabled=not api_key):
            if uploaded_file is not None and input_data and is_valid:
                with st.spinner("üîÑ G√©n√©ration en cours..."):
                    sequencer = PedagogicalSequencerV2(api_key)
                    sequencer_data = sequencer.generate_sequencer(input_data)
                    
                    if sequencer_data:
                        st.session_state.sequencer_data = sequencer_data
                        st.success("‚úÖ S√©quenceur g√©n√©r√© avec succ√®s !")
                        
                        # Affichage des m√©triques de g√©n√©ration
                        generation_stats = analyze_generated_sequencer(sequencer_data)
                        col_gen1, col_gen2 = st.columns(2)
                        with col_gen1:
                            st.metric("‚è±Ô∏è Dur√©e estim√©e", f"{generation_stats['duration']} min")
                        with col_gen2:
                            st.metric("üéØ Couverture Bloom", f"{generation_stats['bloom_coverage']}%")
                    else:
                        st.error("‚ùå Erreur lors de la g√©n√©ration")
            else:
                if not api_key:
                    st.error("‚ùå Veuillez saisir votre cl√© API OpenAI")
                elif not uploaded_file:
                    st.error("‚ùå Veuillez uploader un fichier JSON")
                elif not is_valid:
                    st.error("‚ùå Fichier JSON invalide ou incomplet")
        
        if not api_key:
            st.info("‚ÑπÔ∏è Veuillez saisir votre cl√© API OpenAI dans la sidebar")
    
    # Affichage du s√©quenceur g√©n√©r√©
    if 'sequencer_data' in st.session_state:
        st.markdown("---")
        st.header("üìä S√©quenceur P√©dagogique")
        
        sequencer_data = st.session_state.sequencer_data
        
        # Conversion en DataFrame pour l'affichage
        df = pd.DataFrame(sequencer_data)
        
        # Renommage des colonnes pour l'affichage
        column_mapping = {
            'sequence': 'S√©quence',
            'num_ecran': 'Num √âcran',
            'titre_ecran': 'Titre √âcran',
            'sous_titre': 'Sous-Titre',
            'resume_contenu': 'R√©sum√© du Contenu',
            'type_activite': 'Type d\'Activit√©',
            'niveau_bloom': 'Niveau Bloom',
            'difficulte': 'Difficult√©',
            'duree_estimee': 'Dur√©e (min)',
            'commentaire': 'Commentaire'
        }
        
        df_display = df.rename(columns=column_mapping)
        
        # Affichage du tableau avec filtres
        st.subheader("üìã Vue d'ensemble")
        
        # Filtres
        col_filter1, col_filter2, col_filter3 = st.columns(3)
        with col_filter1:
            sequences = ['Toutes'] + list(df['sequence'].dropna().unique())
            selected_sequence = st.selectbox("Filtrer par s√©quence", sequences)
        
        with col_filter2:
            bloom_levels = ['Tous'] + list(df['niveau_bloom'].dropna().unique())
            selected_bloom = st.selectbox("Filtrer par niveau Bloom", bloom_levels)
        
        with col_filter3:
            difficulty_levels = ['Toutes'] + list(df['difficulte'].dropna().unique())
            selected_difficulty = st.selectbox("Filtrer par difficult√©", difficulty_levels)
        
        # Application des filtres
        filtered_df = df_display.copy()
        if selected_sequence != 'Toutes':
            filtered_df = filtered_df[filtered_df['S√©quence'] == selected_sequence]
        if selected_bloom != 'Tous':
            filtered_df = filtered_df[filtered_df['Niveau Bloom'] == selected_bloom]
        if selected_difficulty != 'Toutes':
            filtered_df = filtered_df[filtered_df['Difficult√©'] == selected_difficulty]
        
        # Affichage du tableau filtr√©
        st.dataframe(
            filtered_df,
            use_container_width=True,
            height=400
        )
        
        # Validation des types d'activit√©s
        from utils_v2 import validate_activity_types, generate_activity_statistics
        
        activity_errors = validate_activity_types(sequencer_data)
        if activity_errors:
            st.warning("‚ö†Ô∏è Types d'activit√©s non conformes d√©tect√©s :")
            for error in activity_errors:
                st.error(f"  ‚Ä¢ {error}")
        else:
            st.success("‚úÖ Tous les types d'activit√©s sont conformes")
        
        # Statistiques d√©taill√©es
        st.subheader("üìà Statistiques du S√©quenceur")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üì± Nombre d'√©crans", len(sequencer_data))
        
        with col2:
            sequences = df['sequence'].dropna().unique()
            st.metric("üìö Nombre de s√©quences", len(sequences))
        
        with col3:
            activities = df['type_activite'].dropna().unique()
            st.metric("üéØ Types d'activit√©s", len(activities))
        
        with col4:
            total_duration = df['duree_estimee'].fillna(5).sum()
            st.metric("‚è±Ô∏è Dur√©e totale", f"{int(total_duration)} min")
        
        # Statistiques sp√©cialis√©es des activit√©s
        activity_stats = generate_activity_statistics(sequencer_data)
        
        st.subheader("üìä Analyse des Types d'Activit√©s")
        
        col_activity1, col_activity2 = st.columns(2)
        
        with col_activity1:
            st.metric(
                "üéØ Conformit√© Recommandations", 
                f"{activity_stats['recommendations_compliance']:.1f}%",
                help="Pourcentage d'activit√©s conformes aux recommandations Bloom/Difficult√©"
            )
        
        with col_activity2:
            authorized_count = sum(1 for item in sequencer_data 
                                 if item.get('type_activite') in ['text', 'quiz', 'accordion', 'video', 'image', 'flash-card'])
            st.metric(
                "‚úÖ Types Autoris√©s", 
                f"{authorized_count}/{len(sequencer_data)}",
                help="Nombre d'√©crans utilisant les types d'activit√©s autoris√©s"
            )
        
        # Graphiques de r√©partition am√©lior√©s
        st.subheader("üìä R√©partitions D√©taill√©es")
        
        col_chart1, col_chart2, col_chart3 = st.columns(3)
        
        with col_chart1:
            # R√©partition par type d'activit√©
            activity_distribution = activity_stats['distribution']
            if activity_distribution:
                st.bar_chart(activity_distribution, use_container_width=True)
                st.caption("R√©partition par type d'activit√©")
        
        with col_chart2:
            # R√©partition par niveau Bloom
            bloom_counts = df['niveau_bloom'].value_counts()
            if not bloom_counts.empty:
                st.bar_chart(bloom_counts, use_container_width=True)
                st.caption("R√©partition par niveau de Bloom")
        
        with col_chart3:
            # R√©partition par difficult√©
            difficulty_counts = df['difficulte'].value_counts()
            if not difficulty_counts.empty:
                st.bar_chart(difficulty_counts, use_container_width=True)
                st.caption("R√©partition par niveau de difficult√©")
        
        # Dur√©e par type d'activit√©
        st.subheader("‚è±Ô∏è Analyse Temporelle par Type d'Activit√©")
        
        duration_by_type = activity_stats['total_duration_by_type']
        if duration_by_type:
            duration_df = pd.DataFrame(list(duration_by_type.items()), columns=['Type d\'Activit√©', 'Dur√©e Totale (min)'])
            st.bar_chart(duration_df.set_index('Type d\'Activit√©'))
        
        # Recommandations d'am√©lioration
        st.subheader("üí° Recommandations d'Am√©lioration")
        
        if activity_stats['recommendations_compliance'] < 80:
            st.warning("üìà La conformit√© aux recommandations peut √™tre am√©lior√©e :")
            
            # Analyser les √©crans non conformes
            non_compliant_screens = []
            for i, item in enumerate(sequencer_data):
                activity_type = item.get('type_activite', '')
                bloom_level = item.get('niveau_bloom', '')
                difficulty = item.get('difficulte', '')
                
                from utils_v2 import get_activity_recommendations
                recommended = get_activity_recommendations(bloom_level, difficulty)
                
                if activity_type not in recommended:
                    non_compliant_screens.append({
                        'ecran': item.get('num_ecran', f'√âcran {i+1}'),
                        'actuel': activity_type,
                        'recommande': ', '.join(recommended),
                        'bloom': bloom_level,
                        'difficulte': difficulty
                    })
            
            if non_compliant_screens:
                st.write("**√âcrans √† optimiser :**")
                for screen in non_compliant_screens[:5]:  # Limiter √† 5 exemples
                    st.write(f"‚Ä¢ {screen['ecran']} : {screen['actuel']} ‚Üí Recommand√© : {screen['recommande']}")
        else:
            st.success("üéâ Excellente conformit√© aux recommandations p√©dagogiques !")
        
        # Types d'activit√©s manquants
        used_types = set(activity_stats['distribution'].keys())
        all_types = {'text', 'quiz', 'accordion', 'video', 'image', 'flash-card'}
        missing_types = all_types - used_types
        
        if missing_types:
            st.info(f"üí° Types d'activit√©s non utilis√©s : {', '.join(missing_types)}")
            st.write("Consid√©rez l'ajout de ces types pour diversifier l'exp√©rience d'apprentissage.")
        
        # Boutons d'export
        st.markdown("---")
        st.subheader("üì• Export du S√©quenceur")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            # Export CSV
            csv_data = export_to_csv(sequencer_data)
            st.download_button(
                label="üì• CSV Standard",
                data=csv_data,
                file_name=f"sequenceur_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
        
        with col2:
            # Export JSON
            json_data = json.dumps(sequencer_data, indent=2, ensure_ascii=False)
            st.download_button(
                label="üì• JSON D√©taill√©", 
                data=json_data,
                file_name=f"sequenceur_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
        
        with col3:
            # Export pour LMS
            lms_data = export_for_lms(sequencer_data)
            st.download_button(
                label="üì• Format LMS",
                data=lms_data,
                file_name=f"sequenceur_lms_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
        
        with col4:
            if st.button("üîÑ Nouvelle G√©n√©ration"):
                del st.session_state.sequencer_data
                st.experimental_rerun()

def analyze_generated_sequencer(sequencer_data):
    """Analyse le s√©quenceur g√©n√©r√© pour fournir des statistiques"""
    total_duration = sum(item.get('duree_estimee', 5) for item in sequencer_data)
    
    # Calcul de la couverture Bloom
    bloom_levels_present = set()
    for item in sequencer_data:
        if item.get('niveau_bloom'):
            bloom_levels_present.add(item['niveau_bloom'])
    
    bloom_coverage = (len(bloom_levels_present) / 6) * 100  # 6 niveaux de Bloom
    
    return {
        'duration': total_duration,
        'bloom_coverage': int(bloom_coverage)
    }

def export_for_lms(sequencer_data):
    """Export sp√©cialis√© pour les plateformes LMS"""
    import io
    import csv
    
    output = io.StringIO()
    fieldnames = [
        'module', 'lesson', 'activity_type', 'title', 'description', 
        'bloom_level', 'difficulty', 'estimated_time', 'prerequisites'
    ]
    
    writer = csv.DictWriter(output, fieldnames=fieldnames)
    writer.writeheader()
    
    for item in sequencer_data:
        writer.writerow({
            'module': item.get('sequence', ''),
            'lesson': item.get('num_ecran', ''),
            'activity_type': item.get('type_activite', ''),
            'title': item.get('titre_ecran', ''),
            'description': item.get('resume_contenu', ''),
            'bloom_level': item.get('niveau_bloom', ''),
            'difficulty': item.get('difficulte', ''),
            'estimated_time': item.get('duree_estimee', 5),
            'prerequisites': item.get('commentaire', '')
        })
    
    return output.getvalue()

if __name__ == "__main__":
    main()