import streamlit as st
import json
import pandas as pd
from datetime import datetime
from openai import OpenAI
from typing import Dict, List, Any
import io

# Configuration de la page
st.set_page_config(
    page_title="G√©n√©rateur de Prompts P√©dagogiques",
    page_icon="ü§ñ",
    layout="wide"
)

class PromptGenerator:
    def __init__(self, api_key: str):
        """Initialise le g√©n√©rateur de prompts avec la cl√© API OpenAI"""
        self.client = OpenAI(api_key=api_key)
    
    def generate_prompt(self, activity_data: Dict, activity_type: str) -> str:
        """G√©n√®re un prompt sp√©cialis√© pour une activit√© sp√©cifique"""
        
        # Templates de prompts par type d'activit√©
        prompt_templates = {
            'text': self._get_text_prompt_template(),
            'quiz': self._get_quiz_prompt_template(),
            'accordion': self._get_accordion_prompt_template(),
            'video': self._get_video_prompt_template(),
            'image': self._get_image_prompt_template(),
            'flash-card': self._get_flashcard_prompt_template()
        }
        
        if activity_type not in prompt_templates:
            return f"Type d'activit√© '{activity_type}' non support√©"
        
        # Pr√©paration du contexte pour la g√©n√©ration de prompt
        context = f"""
        DONN√âES DE L'ACTIVIT√â :
        
        Num√©ro d'√©cran : {activity_data.get('num_ecran', 'Non d√©fini')}
        Titre : {activity_data.get('titre_ecran', 'Non d√©fini')}
        Sous-titre : {activity_data.get('sous_titre', 'Non d√©fini')}
        Contenu : {activity_data.get('resume_contenu', 'Non d√©fini')}
        Niveau Bloom : {activity_data.get('niveau_bloom', 'Non d√©fini')}
        Difficult√© : {activity_data.get('difficulte', 'Non d√©fini')}
        Dur√©e : {activity_data.get('duree_estimee', 'Non d√©fini')} minutes
        Objectif : {activity_data.get('objectif_lie', 'Non d√©fini')}
        Commentaires : {activity_data.get('commentaire', 'Non d√©fini')}
        S√©quence : {activity_data.get('sequence', 'Non d√©fini')}
        
        G√©n√©rez un PROMPT COMPLET et PR√äT √Ä UTILISER pour cr√©er cette activit√© de type "{activity_type}" dans un outil externe.
        """
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": prompt_templates[activity_type]},
                    {"role": "user", "content": context}
                ],
                temperature=0.7,
                max_tokens=2000
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            return f"Erreur lors de la g√©n√©ration : {str(e)}"
    
    def _get_text_prompt_template(self) -> str:
        return """
        Vous √™tes un expert en g√©n√©ration de prompts pour outils de cr√©ation de contenu textuel.
        
        VOTRE MISSION : G√©n√©rer un PROMPT COMPLET que l'utilisateur pourra copier-coller dans ChatGPT, Claude, ou tout autre outil IA pour cr√©er automatiquement le contenu textuel p√©dagogique.
        
        LE PROMPT DOIT CONTENIR :
        1. Le r√¥le de l'IA (ex: "Tu es un expert en...")
        2. Le contexte et l'objectif p√©dagogique pr√©cis
        3. Les sp√©cifications techniques (dur√©e, niveau, difficult√©)
        4. La structure exacte attendue
        5. Les crit√®res de qualit√©
        6. Le format de sortie souhait√©
        7. Les contraintes et adaptations
        
        G√âN√âREZ UN PROMPT COMME CELUI-CI :
        "Tu es un expert en r√©daction p√©dagogique sp√©cialis√© en [domaine]. Cr√©e un contenu textuel de [dur√©e] minutes sur [sujet]...
        
        STRUCTURE ATTENDUE :
        - Titre accrocheur
        - Introduction (50 mots)
        - Corps principal (3 sections)
        - Conclusion avec points cl√©s
        
        CRIT√àRES :
        - Niveau de difficult√© : [niveau]
        - Vocabulaire adapt√© √† [public]
        - Exemples concrets inclus
        
        LIVRABLES : Texte format√© en markdown, pr√™t √† int√©grer."
        
        FORMAT DE SORTIE : UN PROMPT COMPLET PR√äT √Ä COPIER-COLLER dans un outil IA.
        """
    
    def _get_quiz_prompt_template(self) -> str:
        return """
        Vous √™tes un expert en g√©n√©ration de prompts pour outils de cr√©ation de quiz.
        
        VOTRE MISSION : G√©n√©rer un PROMPT COMPLET pour cr√©er automatiquement un quiz p√©dagogique avec questions, r√©ponses, et feedbacks.
        
        LE PROMPT DOIT SP√âCIFIER :
        1. Le r√¥le d'expert en √©valuation p√©dagogique
        2. Le sujet et niveau de Bloom cibl√©
        3. Le nombre de questions selon la dur√©e
        4. Les types de questions adapt√©s
        5. La structure des feedbacks
        6. Le format de sortie (JSON, texte structur√©)
        7. Les crit√®res de difficult√©
        
        EXEMPLE DE PROMPT √Ä G√âN√âRER :
        "Tu es un expert en √©valuation p√©dagogique. Cr√©e un quiz de [X] questions sur [sujet] pour tester le niveau [Bloom]...
        
        SP√âCIFICATIONS :
        - Dur√©e totale : [X] minutes
        - [X] questions QCM + [X] questions ouvertes
        - Difficult√© : [niveau]
        - 4 options par QCM avec distracteurs plausibles
        
        POUR CHAQUE QUESTION :
        - √ânonc√© clair
        - Options de r√©ponse
        - Bonne r√©ponse avec explication
        - Feedback pour r√©ponses incorrectes
        
        FORMAT : JSON structur√© avec questions, r√©ponses, feedbacks."
        
        G√âN√âREZ LE PROMPT COMPLET PR√äT √Ä UTILISER.
        """
    
    def _get_accordion_prompt_template(self) -> str:
        return """
        Vous √™tes un expert en g√©n√©ration de prompts pour outils de cr√©ation d'accord√©ons interactifs.
        
        VOTRE MISSION : G√©n√©rer un PROMPT COMPLET pour cr√©er un accordion p√©dagogique avec sections d√©pliables organis√©es logiquement.
        
        LE PROMPT DOIT INCLURE :
        1. Le r√¥le d'expert en structuration d'informations
        2. Le contenu √† organiser en sections
        3. La logique de progression p√©dagogique
        4. Les sp√©cifications d'interactivit√©
        5. Le format de sortie structur√©
        6. Les √©l√©ments visuels sugg√©r√©s
        
        MOD√àLE DE PROMPT :
        "Tu es un expert en design p√©dagogique interactif. Cr√©e un accordion sur [sujet] avec [X] sections d√©pliables...
        
        STRUCTURE :
        - Introduction g√©n√©rale (visible)
        - [X] sections principales (titres visibles, contenu d√©pliable)
        - Progression logique du simple au complexe
        
        POUR CHAQUE SECTION :
        - Titre accrocheur (ferm√©)
        - Contenu d√©taill√© (ouvert)
        - √âl√©ments visuels sugg√©r√©s
        - Temps de lecture estim√©
        
        SP√âCIFICATIONS :
        - Dur√©e totale : [X] minutes
        - Niveau : [difficult√©]
        - Navigation : s√©quentielle/libre
        
        FORMAT : Structure JSON avec sections, titres, contenus."
        
        CR√âEZ LE PROMPT COMPLET POUR OUTIL EXTERNE.
        """
    
    def _get_video_prompt_template(self) -> str:
        return """
        Vous √™tes un expert en g√©n√©ration de prompts pour outils de cr√©ation vid√©o p√©dagogique.
        
        VOTRE MISSION : G√©n√©rer un PROMPT COMPLET pour cr√©er un script vid√©o avec narration, √©l√©ments visuels et timing.
        
        LE PROMPT DOIT CONTENIR :
        1. Le r√¥le de sc√©nariste vid√©o √©ducatif
        2. Les sp√©cifications techniques (dur√©e, style)
        3. La structure narrative (intro/d√©veloppement/conclusion)
        4. Les descriptions d'√©l√©ments visuels
        5. Le texte de narration
        6. Les timecodes et transitions
        7. Les ressources n√©cessaires
        
        TEMPLATE DE PROMPT :
        "Tu es un sc√©nariste vid√©o sp√©cialis√© en contenu √©ducatif. Cr√©e un script vid√©o de [X] minutes sur [sujet]...
        
        STRUCTURE VID√âO :
        - Introduction accrocheuse (10% du temps)
        - D√©veloppement en [X] parties (70%)
        - Conclusion synth√©tique (20%)
        
        POUR CHAQUE S√âQUENCE :
        - Timecode (d√©but-fin)
        - Texte de narration
        - Description des visuels
        - Animations sugg√©r√©es
        - Transitions
        
        SP√âCIFICATIONS :
        - Dur√©e : [X] minutes
        - Style : [documentaire/explicatif/conversationnel]
        - Public : [niveau]
        - Rythme : adapt√© √† la difficult√© [niveau]
        
        LIVRABLES :
        - Script complet avec timecodes
        - Liste des ressources visuelles
        - Instructions de montage"
        
        G√âN√âREZ LE PROMPT PR√äT POUR OUTIL VID√âO.
        """
    
    def _get_image_prompt_template(self) -> str:
        return """
        Vous √™tes un expert en g√©n√©ration de prompts pour outils de cr√©ation d'images p√©dagogiques interactives.
        
        VOTRE MISSION : G√©n√©rer un PROMPT COMPLET pour cr√©er une image/infographie interactive avec zones cliquables et annotations.
        
        LE PROMPT DOIT SP√âCIFIER :
        1. Le r√¥le de designer p√©dagogique visuel
        2. Le type d'image (sch√©ma, carte, infographie, diagramme)
        3. Les √©l√©ments visuels principaux
        4. Les zones interactives
        5. Les styles graphiques
        6. Les sp√©cifications techniques
        7. L'accessibilit√© et la lisibilit√©
        
        EXEMPLE DE PROMPT :
        "Tu es un designer p√©dagogique sp√©cialis√© en visualisation d'informations. Cr√©e une [type d'image] interactive sur [sujet]...
        
        √âL√âMENTS VISUELS :
        - Image principale : [description]
        - [X] zones interactives cliquables
        - L√©gendes et annotations
        - Palette de couleurs : [sp√©cifications]
        
        INTERACTIVIT√â :
        - Zones cliquables avec pop-ups informatifs
        - Survol avec infobulles
        - Navigation entre √©l√©ments
        
        SP√âCIFICATIONS TECHNIQUES :
        - R√©solution : 1920x1080
        - Style : [moderne/minimaliste/illustratif]
        - Accessibilit√© : contrastes √©lev√©s, texte lisible
        - Dur√©e d'exploration : [X] minutes
        
        FORMAT DE SORTIE :
        - Fichier image principal
        - Coordonn√©es des zones interactives
        - Contenu des pop-ups
        - Guide d'utilisation"
        
        CR√âEZ LE PROMPT COMPLET POUR OUTIL GRAPHIQUE.
        """
    
    def _get_flashcard_prompt_template(self) -> str:
        return """
        Vous √™tes un expert en g√©n√©ration de prompts pour outils de cr√©ation de flash-cards p√©dagogiques.
        
        VOTRE MISSION : G√©n√©rer un PROMPT COMPLET pour cr√©er un jeu de flash-cards optimis√© pour la m√©morisation active.
        
        LE PROMPT DOIT INCLURE :
        1. Le r√¥le d'expert en m√©morisation
        2. Le nombre de cartes selon la dur√©e
        3. Les types d'associations (terme-d√©finition, question-r√©ponse)
        4. La progression par difficult√©
        5. Le syst√®me de r√©vision
        6. Le format de sortie
        7. Les principes de m√©morisation
        
        MOD√àLE DE PROMPT :
        "Tu es un expert en sciences cognitives et m√©morisation active. Cr√©e un jeu de [X] flash-cards sur [sujet]...
        
        SP√âCIFICATIONS :
        - [X] cartes pour [X] minutes d'utilisation
        - Types : [X]% d√©finitions, [X]% questions, [X]% applications
        - Progression : du simple au complexe
        - Niveau : [difficult√©]
        
        POUR CHAQUE CARTE :
        - RECTO : Question/terme/situation claire
        - VERSO : R√©ponse/d√©finition/explication compl√®te
        - Indices mn√©motechniques si pertinent
        - Tags pour cat√©gorisation
        
        PRINCIPES DE CONCEPTION :
        - Une information par carte
        - Questions pr√©cises
        - R√©ponses concises mais compl√®tes
        - Exemples concrets inclus
        
        SYST√àME DE R√âVISION :
        - Intervalle de r√©p√©tition espac√©e
        - Algorithme de difficult√© adaptative
        - Suivi des performances
        
        FORMAT : JSON avec cartes structur√©es recto/verso + m√©tadonn√©es."
        
        G√âN√âREZ LE PROMPT COMPLET POUR OUTIL DE FLASHCARDS.
        """

def load_sequencer_json(uploaded_file) -> List[Dict]:
    """Charge le fichier JSON de s√©quenceur"""
    try:
        content = uploaded_file.read().decode('utf-8')
        return json.loads(content)
    except json.JSONDecodeError:
        st.error("Fichier JSON invalide")
        return []
    except Exception as e:
        st.error(f"Erreur lors du chargement : {str(e)}")
        return []

def main():
    st.title("ü§ñ G√©n√©rateur de Prompts P√©dagogiques")
    st.markdown("*G√©n√©rez des prompts pr√™ts √† utiliser dans d'autres outils IA*")
    st.markdown("---")
    
    # Sidebar configuration
    with st.sidebar:
        st.header("‚öôÔ∏è Configuration")
        
        # Cl√© API OpenAI
        api_key = st.text_input(
            "Cl√© API OpenAI",
            type="password",
            help="Votre cl√© API OpenAI pour g√©n√©rer les prompts"
        )
        
        # Validation de la cl√© API
        if api_key:
            if api_key.startswith('sk-') and len(api_key) > 20:
                st.success("‚úÖ Cl√© API valide")
            else:
                st.error("‚ùå Format de cl√© API invalide")
                api_key = None
        
        st.markdown("---")
        
        # Informations
        with st.expander("‚ÑπÔ∏è √Ä propos des prompts"):
            st.markdown("""
            **Output de cette app :**
            - Prompts **pr√™ts √† copier-coller**
            - Compatibles ChatGPT, Claude, Gemini
            - Sp√©cialis√©s par type d'activit√©
            - Avec sp√©cifications d√©taill√©es
            
            **Utilisation :**
            1. G√©n√©rez vos prompts ici
            2. Copiez un prompt
            3. Collez dans votre outil IA pr√©f√©r√©
            4. Obtenez le contenu p√©dagogique !
            """)
        
        with st.expander("üìã Types de prompts g√©n√©r√©s"):
            st.markdown("""
            - **text** ‚Üí Prompt pour contenu textuel
            - **quiz** ‚Üí Prompt pour quiz interactif
            - **accordion** ‚Üí Prompt pour sections d√©pliables
            - **video** ‚Üí Prompt pour script vid√©o
            - **image** ‚Üí Prompt pour visuel interactif
            - **flash-card** ‚Üí Prompt pour cartes m√©moire
            """)
    
    # Interface principale
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.header("üì§ S√©quenceur d'Entr√©e")
        
        # Upload du fichier JSON
        uploaded_file = st.file_uploader(
            "Choisissez votre fichier de s√©quenceur JSON",
            type=['json'],
            help="Uploadez votre fichier JSON de s√©quenceur p√©dagogique"
        )
        
        if uploaded_file is not None:
            sequencer_data = load_sequencer_json(uploaded_file)
            
            if sequencer_data:
                st.success(f"‚úÖ {len(sequencer_data)} activit√©s charg√©es")
                
                # Analyse des types d'activit√©s
                activity_types = {}
                for activity in sequencer_data:
                    act_type = activity.get('type_activite', 'inconnu')
                    activity_types[act_type] = activity_types.get(act_type, 0) + 1
                
                st.info(f"üìä Types d√©tect√©s : {dict(activity_types)}")
                
                # Aper√ßu des donn√©es
                with st.expander("üîç Aper√ßu du s√©quenceur"):
                    df = pd.DataFrame(sequencer_data)
                    st.dataframe(df[['num_ecran', 'titre_ecran', 'type_activite', 'duree_estimee']])
    
    with col2:
        st.header("ü§ñ G√©n√©ration de Prompts")
        
        if uploaded_file is not None and sequencer_data and api_key:
            
            # S√©lection des activit√©s
            st.subheader("üéØ S√©lection des Activit√©s")
            
            activity_options = []
            for i, activity in enumerate(sequencer_data):
                option_text = f"{activity.get('num_ecran', f'Act{i+1}')} - {activity.get('titre_ecran', 'Sans titre')} ({activity.get('type_activite', 'inconnu')})"
                activity_options.append(option_text)
            
            selected_activities = st.multiselect(
                "Choisissez les activit√©s √† prompter :",
                activity_options,
                default=activity_options[:3] if len(activity_options) >= 3 else activity_options
            )
            
            if st.button("üöÄ G√©n√©rer les Prompts", type="primary"):
                if selected_activities:
                    generator = PromptGenerator(api_key)
                    
                    with st.spinner("üîÑ G√©n√©ration des prompts en cours..."):
                        prompts = {}
                        
                        progress_bar = st.progress(0)
                        for i, selected in enumerate(selected_activities):
                            # Trouver l'index de l'activit√© s√©lectionn√©e
                            activity_index = activity_options.index(selected)
                            activity = sequencer_data[activity_index]
                            
                            # G√©n√©rer le prompt
                            prompt = generator.generate_prompt(
                                activity, 
                                activity.get('type_activite', 'text')
                            )
                            
                            prompt_id = f"{activity.get('num_ecran', f'Act{activity_index+1}')}_{activity.get('type_activite', 'unknown')}"
                            prompts[prompt_id] = {
                                'activite': activity,
                                'prompt': prompt
                            }
                            
                            progress_bar.progress((i + 1) / len(selected_activities))
                        
                        st.session_state.generated_prompts = prompts
                        st.success(f"‚úÖ {len(prompts)} prompts g√©n√©r√©s avec succ√®s !")
                else:
                    st.warning("‚ö†Ô∏è Veuillez s√©lectionner au moins une activit√©")
        
        elif not api_key:
            st.info("‚ÑπÔ∏è Veuillez saisir votre cl√© API OpenAI")
        elif not uploaded_file:
            st.info("‚ÑπÔ∏è Veuillez uploader un fichier de s√©quenceur")
    
    # Affichage des prompts g√©n√©r√©s
    if 'generated_prompts' in st.session_state:
        st.markdown("---")
        st.header("ü§ñ Prompts G√©n√©r√©s")
        
        prompts = st.session_state.generated_prompts
        
        # Onglets par prompt
        tab_names = list(prompts.keys())
        if tab_names:
            tabs = st.tabs(tab_names)
            
            for i, (prompt_id, prompt_data) in enumerate(prompts.items()):
                with tabs[i]:
                    activity = prompt_data['activite']
                    prompt_content = prompt_data['prompt']
                    
                    # Informations de l'activit√©
                    col_info1, col_info2, col_info3 = st.columns(3)
                    with col_info1:
                        st.metric("Type", activity.get('type_activite', 'N/A'))
                    with col_info2:
                        st.metric("Difficult√©", activity.get('difficulte', 'N/A'))
                    with col_info3:
                        st.metric("Dur√©e", f"{activity.get('duree_estimee', 'N/A')} min")
                    
                    # Prompt g√©n√©r√©
                    st.subheader(f"ü§ñ Prompt : {activity.get('titre_ecran', 'Sans titre')}")
                    
                    # Zone de texte copiable
                    st.text_area(
                        "Prompt pr√™t √† copier-coller :",
                        prompt_content,
                        height=300,
                        key=f"prompt_area_{i}"
                    )
                    
                    # Instructions d'utilisation
                    st.info("üí° **Utilisation :** Copiez ce prompt et collez-le dans ChatGPT, Claude, Gemini ou tout autre outil IA pour g√©n√©rer automatiquement le contenu p√©dagogique.")
                    
                    # Bouton de t√©l√©chargement
                    col_dl1, col_dl2 = st.columns(2)
                    with col_dl1:
                        st.download_button(
                            label=f"üì• T√©l√©charger Prompt {prompt_id}",
                            data=prompt_content,
                            file_name=f"prompt_{prompt_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                            mime="text/plain"
                        )
                    with col_dl2:
                        # Bouton pour copier dans le presse-papier (simulation)
                        if st.button(f"üìã Copier", key=f"copy_{i}"):
                            st.success("‚úÖ Prompt copi√© ! (Utilisez Ctrl+A puis Ctrl+C dans la zone de texte)")
        
        # Export global
        st.markdown("---")
        st.subheader("üì¶ Export Global des Prompts")
        
        col_export1, col_export2 = st.columns(2)
        
        with col_export1:
            # Export tous les prompts en un fichier
            all_prompts_content = ""
            for prompt_id, prompt_data in prompts.items():
                activity = prompt_data['activite']
                all_prompts_content += f"""
# PROMPT {prompt_id} - {activity.get('titre_ecran', 'Sans titre')}

Type: {activity.get('type_activite', 'N/A')}
Dur√©e: {activity.get('duree_estimee', 'N/A')} minutes
Difficult√©: {activity.get('difficulte', 'N/A')}

## Prompt √† copier-coller:

{prompt_data['prompt']}

{'='*80}

"""
            
            st.download_button(
                label="üì• T√©l√©charger Tous les Prompts",
                data=all_prompts_content,
                file_name=f"tous_prompts_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                mime="text/plain"
            )
        
        with col_export2:
            # Export en JSON structur√©
            json_export = {
                "metadata": {
                    "date_generation": datetime.now().isoformat(),
                    "nombre_prompts": len(prompts),
                    "types_activites": list(set(prompt_data['activite'].get('type_activite') for prompt_data in prompts.values())),
                    "usage": "Copiez-collez ces prompts dans ChatGPT, Claude, ou tout autre outil IA"
                },
                "prompts": {
                    prompt_id: {
                        "activite_info": prompt_data['activite'],
                        "prompt_ready_to_use": prompt_data['prompt']
                    }
                    for prompt_id, prompt_data in prompts.items()
                }
            }
            
            st.download_button(
                label="üì• Export JSON Structur√©",
                data=json.dumps(json_export, indent=2, ensure_ascii=False),
                file_name=f"prompts_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
        
        # Bouton reset
        if st.button("üîÑ G√©n√©rer de Nouveaux Prompts"):
            del st.session_state.generated_prompts
            st.experimental_rerun()

if __name__ == "__main__":
    main()