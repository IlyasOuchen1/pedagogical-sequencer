import streamlit as st
import json
import pandas as pd
from datetime import datetime
from openai import OpenAI
from typing import Dict, List, Any
import io

# Configuration de la page
st.set_page_config(
    page_title="G√©n√©rateur de Scripts P√©dagogiques",
    page_icon="üìù",
    layout="wide"
)

class ScriptGenerator:
    def __init__(self, api_key: str):
        """Initialise le g√©n√©rateur de scripts avec la cl√© API OpenAI"""
        self.client = OpenAI(api_key=api_key)
    
    def generate_script(self, activity_data: Dict, activity_type: str) -> str:
        """G√©n√®re un script p√©dagogique pour une activit√© sp√©cifique"""
        
        # Prompts sp√©cialis√©s par type d'activit√©
        prompts = {
            'text': self._get_text_prompt(),
            'quiz': self._get_quiz_prompt(),
            'accordion': self._get_accordion_prompt(),
            'video': self._get_video_prompt(),
            'image': self._get_image_prompt(),
            'flash-card': self._get_flashcard_prompt()
        }
        
        if activity_type not in prompts:
            return f"Type d'activit√© '{activity_type}' non support√©"
        
        # Pr√©paration du contexte
        context = f"""
        ACTIVIT√â √Ä SCRIPTER :
        
        Num√©ro d'√©cran : {activity_data.get('num_ecran', 'Non d√©fini')}
        Titre : {activity_data.get('titre_ecran', 'Non d√©fini')}
        Sous-titre : {activity_data.get('sous_titre', 'Non d√©fini')}
        Contenu : {activity_data.get('resume_contenu', 'Non d√©fini')}
        Niveau Bloom : {activity_data.get('niveau_bloom', 'Non d√©fini')}
        Difficult√© : {activity_data.get('difficulte', 'Non d√©fini')}
        Dur√©e : {activity_data.get('duree_estimee', 'Non d√©fini')} minutes
        Objectif : {activity_data.get('objectif_lie', 'Non d√©fini')}
        Commentaires : {activity_data.get('commentaire', 'Non d√©fini')}
        S√©quence : {activity_data.get('sequence', 'Non d√©fini')}
        
        G√©n√©rez le script p√©dagogique d√©taill√© pour cette activit√© de type "{activity_type}".
        """
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": prompts[activity_type]},
                    {"role": "user", "content": context}
                ],
                temperature=0.7,
                max_tokens=2000
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            return f"Erreur lors de la g√©n√©ration : {str(e)}"
    
    def _get_text_prompt(self) -> str:
        return """
        Vous √™tes un expert en r√©daction p√©dagogique. Votre mission : cr√©er un script de contenu textuel structur√© et engageant.

        G√âN√âREZ UN SCRIPT TEXTUEL avec :
        1. Un titre accrocheur
        2. Une introduction captivante (2-3 phrases)
        3. Le contenu principal organis√© en sections claires
        4. Des exemples concrets et pertinents
        5. Des √©l√©ments de mise en forme (gras, italique, listes)
        6. Une conclusion avec points cl√©s √† retenir
        7. Une transition vers la suite

        ADAPTEZ selon la difficult√© :
        - Facile : langage simple, exemples de base
        - Moyen : vocabulaire technique mod√©r√©
        - Difficile : terminologie sp√©cialis√©e, concepts avanc√©s

        FORMAT : Script en texte format√©, pr√™t √† int√©grer dans un outil de formation.
        """
    
    def _get_quiz_prompt(self) -> str:
        return """
        Vous √™tes un expert en √©valuation p√©dagogique. Votre mission : cr√©er un script de quiz interactif.

        G√âN√âREZ UN SCRIPT DE QUIZ avec :
        1. Instructions claires pour l'apprenant
        2. 3-8 questions selon la dur√©e (environ 2 min par question)
        3. Questions adapt√©es au niveau de Bloom sp√©cifi√©
        4. Options de r√©ponses plausibles
        5. Bonnes r√©ponses avec explications
        6. Feedbacks constructifs pour les mauvaises r√©ponses
        7. Score et bilan final

        TYPES DE QUESTIONS selon Bloom :
        - Comprendre : QCM de d√©finition, vrai/faux
        - Appliquer : Questions de mise en situation
        - Analyser : Questions de comparaison, analyse de cas
        - √âvaluer : Questions d'argumentation, critiques

        FORMAT : Script d√©taill√© avec questions, r√©ponses et feedbacks.
        """
    
    def _get_accordion_prompt(self) -> str:
        return """
        Vous √™tes un expert en structuration d'informations. Votre mission : cr√©er un script d'accordion p√©dagogique.

        G√âN√âREZ UN SCRIPT D'ACCORDION avec :
        1. Introduction g√©n√©rale du contenu
        2. 4-8 sections d√©pliables selon la dur√©e
        3. Titres de sections engageants (ferm√©s)
        4. Contenu d√©taill√© pour chaque section (ouvert)
        5. Progression logique entre les sections
        6. √âl√©ments visuels sugg√©r√©s (images, sch√©mas)
        7. Interactions recommand√©es (clic, survol)

        USAGES selon Bloom :
        - Comprendre : D√©finitions expandables, explications d√©taill√©es
        - Analyser : Comparaisons structur√©es, d√©compositions
        - √âvaluer : Crit√®res d'√©valuation, grilles d'analyse

        FORMAT : Script avec sections titr√©es et contenu d√©taill√© pour chaque partie.
        """
    
    def _get_video_prompt(self) -> str:
        return """
        Vous √™tes un expert en sc√©narisation vid√©o √©ducative. Votre mission : cr√©er un script vid√©o p√©dagogique.

        G√âN√âREZ UN SCRIPT VID√âO avec :
        1. Synopsis et objectif de la vid√©o
        2. Structure temporelle (intro 10%, d√©veloppement 70%, conclusion 20%)
        3. Texte de narration (voix off)
        4. Descriptions des √©l√©ments visuels
        5. Animations et transitions sugg√©r√©es
        6. Moments d'interaction ou de pause
        7. Ressources visuelles n√©cessaires

        STYLES selon difficult√© :
        - Facile : narration simple, visuels clairs
        - Moyen : rythme mod√©r√©, animations explicatives
        - Difficile : contenu dense, sch√©mas complexes

        FORMAT : Script d√©taill√© avec timecodes, narration et indications visuelles.
        """
    
    def _get_image_prompt(self) -> str:
        return """
        Vous √™tes un expert en design p√©dagogique visuel. Votre mission : cr√©er un script d'image interactive.

        G√âN√âREZ UN SCRIPT D'IMAGE avec :
        1. Description g√©n√©rale de l'image principale
        2. √âl√©ments visuels cl√©s √† inclure
        3. Zones interactives (cliquables, hover)
        4. Contenu des pop-ups/infobulles
        5. L√©gendes et annotations
        6. Palette de couleurs sugg√©r√©e
        7. Style graphique recommand√©

        TYPES selon Bloom :
        - Se souvenir : Sch√©mas simples, illustrations mn√©motechniques
        - Comprendre : Infographies, diagrammes explicatifs
        - Analyser : Cartes conceptuelles, comparaisons visuelles

        FORMAT : Script descriptif avec sp√©cifications visuelles et interactions.
        """
    
    def _get_flashcard_prompt(self) -> str:
        return """
        Vous √™tes un expert en m√©morisation active. Votre mission : cr√©er un script de flash-cards p√©dagogiques.

        G√âN√âREZ UN SCRIPT DE FLASH-CARDS avec :
        1. Introduction au jeu de cartes
        2. 8-20 cartes selon la dur√©e (1-2 min par carte)
        3. Questions/termes au recto
        4. R√©ponses/d√©finitions au verso
        5. Indices ou mn√©motechniques
        6. Progression par difficult√©
        7. Syst√®me de r√©vision sugg√©r√©

        TYPES DE CARTES :
        - Concept ‚Üî D√©finition
        - Question ‚Üî R√©ponse
        - Terme ‚Üî Explication
        - Situation ‚Üî Solution

        FORMAT : Script avec cartes num√©rot√©es, recto/verso et conseils d'utilisation.
        """

def load_sequencer_json(uploaded_file) -> List[Dict]:
    """Charge le fichier JSON de s√©quenceur"""
    try:
        content = uploaded_file.read().decode('utf-8')
        return json.loads(content)
    except json.JSONDecodeError:
        st.error("Fichier JSON invalide")
        return []
    except Exception as e:
        st.error(f"Erreur lors du chargement : {str(e)}")
        return []

def main():
    st.title("üìù G√©n√©rateur de Scripts P√©dagogiques")
    st.markdown("*G√©n√©rez des scripts d√©taill√©s √† partir de votre s√©quenceur p√©dagogique*")
    st.markdown("---")
    
    # Sidebar configuration
    with st.sidebar:
        st.header("‚öôÔ∏è Configuration")
        
        # Cl√© API OpenAI
        api_key = st.text_input(
            "Cl√© API OpenAI",
            type="password",
            help="Votre cl√© API OpenAI pour g√©n√©rer les scripts"
        )
        
        # Validation de la cl√© API
        if api_key:
            if api_key.startswith('sk-') and len(api_key) > 20:
                st.success("‚úÖ Cl√© API valide")
            else:
                st.error("‚ùå Format de cl√© API invalide")
                api_key = None
        
        st.markdown("---")
        
        # Informations
        with st.expander("‚ÑπÔ∏è Format JSON attendu"):
            st.markdown("""
            **Structure requise :**
            ```json
            [
              {
                "sequence": "Nom de la s√©quence",
                "num_ecran": "01-Intro-01",
                "titre_ecran": "Titre",
                "type_activite": "text|quiz|accordion|video|image|flash-card",
                "niveau_bloom": "Comprendre",
                "difficulte": "facile|moyen|difficile",
                "duree_estimee": 15,
                "objectif_lie": "Objectif p√©dagogique",
                "resume_contenu": "Description...",
                "commentaire": "Notes..."
              }
            ]
            ```
            """)
    
    # Interface principale
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.header("üì§ S√©quenceur d'Entr√©e")
        
        # Upload du fichier JSON
        uploaded_file = st.file_uploader(
            "Choisissez votre fichier de s√©quenceur JSON",
            type=['json'],
            help="Uploadez votre fichier JSON de s√©quenceur p√©dagogique"
        )
        
        if uploaded_file is not None:
            sequencer_data = load_sequencer_json(uploaded_file)
            
            if sequencer_data:
                st.success(f"‚úÖ {len(sequencer_data)} activit√©s charg√©es")
                
                # Analyse des types d'activit√©s
                activity_types = {}
                for activity in sequencer_data:
                    act_type = activity.get('type_activite', 'inconnu')
                    activity_types[act_type] = activity_types.get(act_type, 0) + 1
                
                st.info(f"üìä Types d√©tect√©s : {dict(activity_types)}")
                
                # Aper√ßu des donn√©es
                with st.expander("üîç Aper√ßu du s√©quenceur"):
                    df = pd.DataFrame(sequencer_data)
                    st.dataframe(df[['num_ecran', 'titre_ecran', 'type_activite', 'duree_estimee']])
    
    with col2:
        st.header("üìã G√©n√©ration de Scripts")
        
        if uploaded_file is not None and sequencer_data and api_key:
            
            # S√©lection des activit√©s √† scripter
            st.subheader("üéØ S√©lection des Activit√©s")
            
            activity_options = []
            for i, activity in enumerate(sequencer_data):
                option_text = f"{activity.get('num_ecran', f'Act{i+1}')} - {activity.get('titre_ecran', 'Sans titre')} ({activity.get('type_activite', 'inconnu')})"
                activity_options.append(option_text)
            
            selected_activities = st.multiselect(
                "Choisissez les activit√©s √† scripter :",
                activity_options,
                default=activity_options[:3] if len(activity_options) >= 3 else activity_options
            )
            
            if st.button("üöÄ G√©n√©rer les Scripts", type="primary"):
                if selected_activities:
                    generator = ScriptGenerator(api_key)
                    
                    with st.spinner("üîÑ G√©n√©ration des scripts en cours..."):
                        scripts = {}
                        
                        progress_bar = st.progress(0)
                        for i, selected in enumerate(selected_activities):
                            # Trouver l'index de l'activit√© s√©lectionn√©e
                            activity_index = activity_options.index(selected)
                            activity = sequencer_data[activity_index]
                            
                            # G√©n√©rer le script
                            script = generator.generate_script(
                                activity, 
                                activity.get('type_activite', 'text')
                            )
                            
                            script_id = f"{activity.get('num_ecran', f'Act{activity_index+1}')}_{activity.get('type_activite', 'unknown')}"
                            scripts[script_id] = {
                                'activite': activity,
                                'script': script
                            }
                            
                            progress_bar.progress((i + 1) / len(selected_activities))
                        
                        st.session_state.generated_scripts = scripts
                        st.success(f"‚úÖ {len(scripts)} scripts g√©n√©r√©s avec succ√®s !")
                else:
                    st.warning("‚ö†Ô∏è Veuillez s√©lectionner au moins une activit√©")
        
        elif not api_key:
            st.info("‚ÑπÔ∏è Veuillez saisir votre cl√© API OpenAI")
        elif not uploaded_file:
            st.info("‚ÑπÔ∏è Veuillez uploader un fichier de s√©quenceur")
    
    # Affichage des scripts g√©n√©r√©s
    if 'generated_scripts' in st.session_state:
        st.markdown("---")
        st.header("üìÑ Scripts G√©n√©r√©s")
        
        scripts = st.session_state.generated_scripts
        
        # Onglets par script
        tab_names = list(scripts.keys())
        if tab_names:
            tabs = st.tabs(tab_names)
            
            for i, (script_id, script_data) in enumerate(scripts.items()):
                with tabs[i]:
                    activity = script_data['activite']
                    script_content = script_data['script']
                    
                    # Informations de l'activit√©
                    col_info1, col_info2, col_info3 = st.columns(3)
                    with col_info1:
                        st.metric("Type", activity.get('type_activite', 'N/A'))
                    with col_info2:
                        st.metric("Difficult√©", activity.get('difficulte', 'N/A'))
                    with col_info3:
                        st.metric("Dur√©e", f"{activity.get('duree_estimee', 'N/A')} min")
                    
                    # Script g√©n√©r√©
                    st.subheader(f"üìù Script : {activity.get('titre_ecran', 'Sans titre')}")
                    st.markdown(script_content)
                    
                    # Bouton de t√©l√©chargement
                    st.download_button(
                        label=f"üì• T√©l√©charger Script {script_id}",
                        data=script_content,
                        file_name=f"script_{script_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
                        mime="text/markdown"
                    )
        
        # Export global
        st.markdown("---")
        st.subheader("üì¶ Export Global")
        
        col_export1, col_export2 = st.columns(2)
        
        with col_export1:
            # Export tous les scripts en un fichier
            all_scripts_content = ""
            for script_id, script_data in scripts.items():
                activity = script_data['activite']
                all_scripts_content += f"""
# {script_id} - {activity.get('titre_ecran', 'Sans titre')}

**Type :** {activity.get('type_activite', 'N/A')}  
**Dur√©e :** {activity.get('duree_estimee', 'N/A')} minutes  
**Difficult√© :** {activity.get('difficulte', 'N/A')}  

{script_data['script']}

---

"""
            
            st.download_button(
                label="üì• T√©l√©charger Tous les Scripts",
                data=all_scripts_content,
                file_name=f"tous_scripts_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
                mime="text/markdown"
            )
        
        with col_export2:
            # Export en JSON structur√©
            json_export = {
                "metadata": {
                    "date_generation": datetime.now().isoformat(),
                    "nombre_scripts": len(scripts),
                    "types_activites": list(set(script_data['activite'].get('type_activite') for script_data in scripts.values()))
                },
                "scripts": scripts
            }
            
            st.download_button(
                label="üì• Export JSON Structur√©",
                data=json.dumps(json_export, indent=2, ensure_ascii=False),
                file_name=f"scripts_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
        
        # Bouton reset
        if st.button("üîÑ G√©n√©rer de Nouveaux Scripts"):
            del st.session_state.generated_scripts
            st.experimental_rerun()

if __name__ == "__main__":
    main()